// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SQLFreshRotten.api.ProviderContext;

#nullable disable

namespace SQLFreshRotten.api.Migrations
{
    [DbContext(typeof(DbCtx))]
    partial class DbCtxModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SQLFreshRotten.api.Models.Movie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_movie");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Actors")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("actors");

                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("authors");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("movie_info");

                    b.Property<string>("Directors")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("directors");

                    b.Property<string>("Genres")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("genres");

                    b.Property<string>("ProductionCompany")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("production_company");

                    b.Property<int>("Runtime")
                        .HasColumnType("int")
                        .HasColumnName("runtime");

                    b.Property<DateTime>("StreamingReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("streaming_release_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("movie_title");

                    b.Property<int>("TomatometerCount")
                        .HasColumnType("int")
                        .HasColumnName("tomatometer_count");

                    b.Property<decimal>("TomatometerRating")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("tomatometer_rating");

                    b.Property<string>("TomatometerStatus")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tomatometer_status");

                    b.HasKey("Id");

                    b.ToTable("movies", (string)null);
                });

            modelBuilder.Entity("SQLFreshRotten.api.Models.Portada", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_portada");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("Movie")
                        .HasColumnType("bigint")
                        .HasColumnName("id_movie");

                    b.HasKey("Id");

                    b.ToTable("portadas", (string)null);
                });

            modelBuilder.Entity("SQLFreshRotten.api.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_user");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SQLFreshRotten.api.Models.UserReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_user_reviews");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("Movie")
                        .HasColumnType("bigint")
                        .HasColumnName("id_movie");

                    b.Property<string>("ReviewContent")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("review_content");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("review_date");

                    b.Property<decimal>("ReviewScore")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("review_score");

                    b.Property<string>("ReviewStatus")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("review_status");

                    b.Property<long>("User")
                        .HasColumnType("bigint")
                        .HasColumnName("id_users");

                    b.HasKey("Id");

                    b.ToTable("user_reviews", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
